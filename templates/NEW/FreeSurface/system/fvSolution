/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSolution;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


defaultSolvers
{
    gamg
    {
        solver          GAMG;
        tolerance       1e-08;
        relTol          0.01;
        smoother        GaussSeidel;
        cacheAgglomeration true;
        nCellsInCoarsestLevel 20;
        agglomerator    faceAreaPair;
        mergeLevels     1;
    }
    pcg
    {
        solver          PCG;
        preconditioner  DIC;
        tolerance       1e-06;
        relTol          0.01;
    }
    smoothSolver
    {
        solver          smoothSolver;
        smoother        GaussSeidel;
        nSweeps         2;
        tolerance       1e-07;
        relTol          0.1;
    }
    pbicg
    {
        solver          PBiCG;
        preconditioner  DILU;
        tolerance       1e-08;
        relTol          0.01;
    }
}


solvers
{
    "alpha.water.*"
    {
        nAlphaCorr      1;
        nAlphaSubCycles 2;
        cAlpha          1;
        icAlpha         0;

        /* Probably only with LTS:
        MULESCorr       no;
        nLimiterIter    10;
        alphaApplyPrevCorr  yes;

        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-8;
        relTol          0;
        minIter         1;
        */
    }

    "pcorr.*"
    {
        $:defaultSolvers.pcg;

        preconditioner
        {
            $:defaultSolvers.gamg;
        };
        relTol          0;
    };

    p_rgh
    {
        $:defaultSolvers.gamg;

        tolerance       1e-7;
        relTol          0.01;
    };

    p_rghFinal
    {
        $p_rgh;
        relTol          0;
    }

    "(U|k|omega).*"
    {
        $:defaultSolvers.smoothSolver;
    };

    "p|Phi"  // Phi and p for potentialFlow intitialisation
    {
        $:defaultSolvers.gamg;
        tolerance       1e-8;
        relTol          0.01;
    };


}

// Macro variable for use in all methods below
referencePressure
{
    pRefCell                    0;
    pRefValue                   0;
}

PIMPLE
{
    momentumPredictor   yes;

    nOuterCorrectors    1;
    nCorrectors         2;
    nNonOrthogonalCorrectors 2;

    maxCo               10; // LTS
    maxAlphaCo          5;  // LTS

    rDeltaTSmoothingCoeff 0.05;
    rDeltaTDampingCoeff 0.5;
    nAlphaSpreadIter    0;
    nAlphaSweepIter     0;
    maxDeltaT           1;
    $referencePressure;
}

potentialFlow
{
    nNonOrthogonalCorrectors    20;
    $referencePressure;
}


relaxationFactors
{
    fields
    {
    }
    equations
    {
        ".*" 1;
    }
}

cache
{
    grad(U);
}


// ************************************************************************* //
