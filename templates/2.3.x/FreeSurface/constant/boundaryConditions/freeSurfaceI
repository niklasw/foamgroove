/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.1.x                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      boundaryConditions;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "$FOAM_CASE/setup.foam"

    walls
    {
        p_rgh
        {
            type            fixedFluxPressure;
            value           uniform 0;
        };

        alpha1
        {
            type            zeroGradient;
        };

    };

    default
    {
        $..walls;
    };

    fixedInlet
    {
        p_rgh
        {
            type             fixedFluxPressure;
            value            uniform 0;
        };

        alpha1
        {
            type            fixedValue;
            value           uniform 0;
        };

    };

    freeSurfaceOutlet
    {
        U
        {
            type            outletPhaseMeanVelocity;
            alpha           alpha.water;
            Umean           $:velocity.reference;
            value           $:velocity.ambient;
        };

        p_rgh
        {
            type            zeroGradient;
        };

        alpha1
        {
            type            variableHeightFlowRate;
            lowerBound      0;
            upperBound      1;
            value           uniform 0;
        };

        p_gh
        {
            type            fixedValue;
            value           $:pressure.ambient;
        }
    };

    pressureOutlet
    {
        $..freeSurfaceOutlet;
    };

    totalPressure
    {   
        U
        {
            type            pressureInletOutletVelocity;
            phi             phi;
            tangentialVelocity  $:velocity.ambient;
            value               $:velocity.ambient;
        };

        p_rgh
        {
            type            totalPressure;
            gamma           1;
            phi             phi;
            U               U;
            rho             rho;
            value           $:pressure.ambient;
            p0              $:pressure.ambient;
        };

        alpha1
        {
            type            inletOutlet;
            inletValue      uniform 0;
            value           uniform 0;
        };
    };

    movingWalls
    {
        $..walls;
    };

    potentialFreeSurface
    {
        ".*"
        {
            type    slip;
        };

        p
        {
            type    calculated;
        };

        p_gh
        {
            type    waveSurfacePressure;
            value   $:pressure.ambient;
        };

        U
        {
            type    pressureInletOutletParSlipVelocity;
            value   uniform (0 0 0);
        }

    };

// ************************************************************************* //
