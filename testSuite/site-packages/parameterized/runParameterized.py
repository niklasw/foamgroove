#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os,sys,glob,re,time
from parameterized.suiteCore import SuiteRunner
from parameterized.suiteUtils import Paths,Error,Debug,Info,findFiles

progName = os.path.basename(sys.argv[0])

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

import signal
def signal_handler(signal, frame):
    print('\nOapps! Killed by SIGINT.')
    print('\t(Manually clean out stale subCases)')
    sys.exit(0)

def getArgs():
    from optparse import OptionParser
    from optparse import Values as optValues
    descString = """
    Test suite runner frontend
    """
    parser=OptionParser(description=descString)
    parser.add_option('-t', '--tests', dest='testroot', default=None, type=str, help='Test cases root')
    parser.add_option('-p', '--present', dest='htmlroot', default=None, type=str, help='Publish to this presetation root,  else skip presentation.')
    parser.add_option('-R', '--norun', dest='norun', action='store_true', default=False, help='Do not run anything')
    parser.add_option('-D', '--delete', dest='deletecases', action='store_true', default=False, help='Do delete sub cases after runs')
    parser.add_option('-N', '--np', dest='nprocs', default=1, type=int, help='Number of simultaneous tests to spawn')
    parser.add_option('-g', '--debug', dest='debug', action='store_true', default=False, help='Verbose output')
    parser.add_option('-f', '--parameterfile', dest='parameterfile', default=None, help='Only run parameter set defined by file (else all found param files are run.)')
    parser.add_option('-J', '--jinja', dest='jinja', action='store_false', default=True, help='Do NOT use jinja2. Use legacy string.Template')
    options, arguments = parser.parse_args()

    if not options.testroot:
        Error('Need testroot. Run with --help')
    if options.htmlroot:
        if os.path.realpath(options.testroot) == os.path.realpath(options.htmlroot):
            Error('Test root and Presentation root cannot be same')

    p = Paths(options.testroot, options.htmlroot, noCheck=True)
    p.SkipPresentation = False if options.htmlroot else True
    p.DeleteSubCases = options.deletecases
    p.ParameterFile = options.parameterfile
    p.Debug = options.debug
    p.SkipRun = options.norun
    p.nThreads = options.nprocs
    p.Jinja = options.jinja
    p.assertRoots()
    return arguments

def testPaths():
    p = Paths()

    presentRoot = p.presentRoot(p.TestRoot)
    print(presentRoot)

def findExe(exe):
    from distutils import spawn
    if spawn.find_executable(exe):
        return True
    else:
        return False

if __name__=="__main__":
    signal.signal(signal.SIGINT, signal_handler)
    if not findExe('pvbatch'):
        Info("This program needs pvbatch (paraview python batch mode). Can't find it in path.")
        Info("You may have troubles running the suite. Sleeping for 2 sec. Control C to exit.")
        time.sleep(2)
        Paths(noCheck=True).SkipPost = True

    arguments = getArgs()
    if not 'TEST' in arguments:
        p = Paths()
        Suite = SuiteRunner(p.TestRoot)
        Suite.run(p.nThreads)
        Suite.present()
    else:
        testPaths()
