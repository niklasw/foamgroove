#!/usr/bin/env pvpython
# -*- coding: utf-8 -*-

import re,sys,os,string
import copy
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy

try:
    try: paraview.simple
    except: from paraview.simple import *
    paraview.simple._DisableFirstRenderCameraReset()
except:
    print('WARNING: Paraview API not found')
    #sys.exit(1)


from parameterized.caseBook import Book, ResultPicture, DataTable
from parameterized.suiteUtils import Error,Info

def exceptionWrap(func):
    def tryExcept(*args,**kwargs):
        try:
            func(*args,**kwargs)
        except:
            sys.stderr.write('Failed function:\n{0}\n'.format(func))
            print('Failed function call in postprocessing')
    return tryExcept

def cleanPostProcessingData(postProcessingFile):
    """Cleans e.g. forces files from parentheses and comments.
    Returns a list of strings void of parentheses (etc)"""
    import string
    stringList = None
    if not os.path.isfile(postProcessingFile):
        Error('Cannot read data file {0}'.format(postProcessingFile))
    with open(postProcessingFile,'r') as fp:
        stringList = fp.readlines()
    dropPat = re.compile('^\s*(?![\(\)\#"\/a-zA-Z])')
    parenPat = re.compile('[,\(\)]')
    filtered = list(filter(dropPat.match, stringList))
    filtered = [parenPat.sub(' ',a) for a in filtered]
    return list(map(string.strip,filtered))

def postProcessDataFileToArray(postProcessingFile):
    from numpy import array
    cleanLines = cleanPostProcessingData(postProcessingFile)
    data = []
    for item in cleanLines:
        data.append(list(map(float,item.split())))
    return array(data)

class PostTool:

    def __init__(self,root,pvt=None):
        self.book = Book.open(root)
        self.caseRoot = root
        self.pvt = pvt

    def close(self):
        self.book.close()
        Info("PostTool: Done post processing. Closing book now")

    def addPicToBook(self,figName,desc=''):
        pic = ResultPicture(root=self.caseRoot,
                            fileName=figName,
                            description=desc)
        self.book.pictures.append(pic)

    #@exceptionWrap
    def createSliceImage(self,sliceConf,figName,desc=''):
        if self.pvt is None:
            print('Cannot use createSliceImage without a pvTools instance')
            return False
        pic = ResultPicture(root=self.caseRoot,
                            fileName=figName+'.png',
                            description=desc)
        self.pvt.initFromSetup(sliceConf)
        Hide()
        self.pvt.createSlice(origin=sliceConf.ORIGIN,normal=sliceConf.NORMAL)
        self.pvt.calculator()
        self.pvt.legend(sliceConf.LEGEND)
        Show()
        self.pvt.saveFig(figName,sliceConf.IMAGE_SCALE)
        self.book.pictures.append(pic)
        return True
    
    @exceptionWrap
    def createGraph(self,figName,description,dataFile,xcol=0,ycol=3):
        pic = ResultPicture(root=self.caseRoot,                           \
                        fileName=figName+'.png',                     \
                        description = description)
        data = postProcessDataFileToArray(dataFile)
        x,y = (data[:,xcol], data[:,ycol])
        plt.close()
        plt.plot(x,y)
        plt.grid('on')
        plt.savefig(pic.path())
        pic.dataSet=numpy.array([x,y])
        self.book.pictures.append(pic)

    @exceptionWrap
    def addImage(self,imageFile,description, arrayData=None):
        """Add an image to book. imageFile here file name, like image.jpg
        optional data must be a numpy.array"""
        pic = ResultPicture(root=self.caseRoot,
                            fileName = imageFile,
                            description=description)
        if arrayData:
            pic.dataSet = arrayData
        self.book.pictures.append(pic)


